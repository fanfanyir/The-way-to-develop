一、基本概念：
Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。

二、Generator 多种理解角度：
1. 语法上：Generator 函数是一个状态机，封装了多个内部状态。执行 Generator 函数会返回一个遍历器对象，这个遍历器对象可以依次遍历 Generator 函数内部的每一个状态。
2. 形式上：Generator 函数是一个普通函数，但是有两个特征。一是，function 关键字与函数名之间有一个星号；二是，函数体内部使用 yield 表达式，定义不同的内部状态。

function* helloWorldGenerator(){
  yield 'hello';
  yield 'world';
  yield 'ending';
}

var hw = helloWorldGenerator();

该函数有三个状态：hello， world 和 return 语句。

调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象（遍历器对象）。
下一步，必须调用遍历器对象的 next 方法，使得指针移向下一个状态。也就是说，每次调用 next 方法，内部指针就从函数头部或上一次停下来的地方开始执行，
直到遇到下一个 yield 表达式（或 return 语句）为止。换言之，Generator 函数是分段执行的， yield 表达式是暂时执行的标记，而 next 方法可以恢复执行。

hw.next()   // { value: 'hello', done: false }  next 方法返回一个对象，它的 value 属性就是当前 yield 表达式的值 hello， done 属性的值 false，表示遍历还没有结束。
hw.next()   // { value: 'world', done: false }
hw.next()   // { value: 'ending', done: true }  Generator 函数从上次 yield 表达式停下的地方，一直执行到 return 语句。 next 方法返回的对象的 value 属性，就是紧跟在 return 语句后面的表达式的值（如果没有 return 语句，则 value 属性的值为 undefined），done 属性的值 true，表示遍历已经结束。
hw.next()   // { value: 'undefined', done: true } 此时 Generator 函数已经运行完毕，next 方法返回对象的 value 属性为 undefined， done 属性为 true。以后再调用 next 方法，返回的都是这个值。

总结： 调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的 next 方法，就会返回一个有着 value 和 done 两个属性的对象。value 属性表示当前的内部状态的值，是 yield 表达式后面那个表达式的值；done 属性是一个布尔值，表示是否遍历结束。

ES6 没有规定，function 关键字与函数名之间的星号写在哪个位置，所以前后是否有空格都不影响。  一般写法是： function* foo(x,y){...}

三、yield 表达式
由于 Generator 函数返回的遍历器对象，只有调用 next 方法才会遍历下一个内部状态，所以其实提供了一种可以暂时执行的函数。yield 表达式就是暂停标志。
1.
2.
3.