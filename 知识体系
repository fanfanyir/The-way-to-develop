前端知识体系
1. 开发环境
2. 运行环境
3. 标准
4. 基础知识

一、基础知识
    1. 算法
    2. 数据结构
    3. 面向对象思想
    4. 设计模式
二、标准: 一方面指导开发人员如何写代码，一方面指导浏览器如何运行代码
    1. ECMA-262 标准：JS 和 ES6 的基本词法、语法都是这个标准来制定且推行的。
        eg.
            原型和原型链
            作用域和闭包
            异步
            ES6 的新增语法
    2. W3C 标准：除了 JS 和 ES6 基础语法，其他常用的功能都是这个标准制定的。
        eg.
            HTML
            CSS
            Javascript Web Api(例如 DOM 操作、BOM 操作、事件绑定、ajax 等)
            HTTP 协议
            存储
            websocket
            JSON 和 XML
            2D 3D
三、开发环境
    1. 代码版本管理: git
    2. IDE: sublime vscode vim
    3. 脚手架：vue-cli, create-react-app
    4. 构建工具：webpack
    5. 本地服务和 mock: webpack-dev-server
    6. debug: chrome 开发者工具，抓包，代理等
    7. 部署提测，各个公司都不一样，基本原理都是将代码压缩然后上传到测试机
    8. 单元测试
    9. 有时需要操作测试机，需要掌握 linux 基础命令
四、运行环境
    1. 标准的浏览器环境，要考虑：
        (1) 加载和渲染过程，“从输入 url 到呈现出页面的整个过程”
        (2) 性能优化，更快的加载，解析和渲染
        (3) 安全问题，XSS 和 CSRF
        (4) 浏览器兼容性
        (5) 响应式布局
    2. 非标准的浏览器环境：一个特定 app 的 webview 中，页面在微信中展示、hybrid形式等，除了以上还要考虑：
        (1) hybrid 如何发布和更新，这是一个前端，server端和客户端共同解决的问题
        (2) js-bridge 的使用和原理，eg. 微信 JSSDK 的使用

框架和库：任何框架和库的出现都是为了满足我们日常开发的效率和设计，都是对已有方式的一种改进和补充(因为基础和标准不变)

要找到各自对应的位置而不是全部归类为框架和库！

1. vue 最主要的功能 MVVM 和组件化。
    MVVM 是 MVC 的一种变异或者微创新，MVC 又是设计模式的一种组合形式，因此 MVVM  与设计相关。
    组件化和面向对象基本上是同一个思想，是面向对象思想在前端 view 层应用的一种体现，因此组件化 与面向对象相关。
----vue 这个框架是 设计、面向对象的一种具体体现，应该归属于基础知识的一部分。
2. React 和 vue 同理，但是更加纯粹的组件化，没有 MVVM
3. jQuery 属于 JS Web  API
4. underscore 或者 lodash，是一个基础函数库，只和最基础的语法有关，属于 ECMA 标准的一个扩充。




